import asyncio
import os
from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from contextlib import asynccontextmanager

from app.routers import tickets, messages, note, ws_support, queue, attachments
from app.database import engine, Base
from app.email.email_task import periodic_email_check
from app.background.deadline_monitor import monitor_deadlines
from app.seed_queues import seed_queues


@asynccontextmanager
async def lifespan(app: FastAPI):
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ—Ç
    os.makedirs("uploads", exist_ok=True)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –≤ –ë–î
    seed_queues()

    # üîÅ –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    email_task = asyncio.create_task(periodic_email_check())
    monitor_task = asyncio.create_task(monitor_deadlines())

    yield

    # ‚õîÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    for task in (email_task, monitor_task):
        task.cancel()
        try:
            await task
        except asyncio.CancelledError:
            pass


app = FastAPI(
    title="Support System",
    description="Made by Vladislav Lakhtionov",
    lifespan=lifespan
)

# üìÅ Static-—Ñ–∞–π–ª—ã: –æ—Ç–¥–∞—ë–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è
app.mount("/uploads", StaticFiles(directory="uploads"), name="uploads")

app.include_router(tickets.router)
app.include_router(messages.router)
app.include_router(note.router)
app.include_router(ws_support.router)
app.include_router(queue.router)
app.include_router(attachments.router)

# –î–ª—è –∑–∞–ø—É—Å–∫–∞ ‚Äì uvicorn app.main:app --reload
